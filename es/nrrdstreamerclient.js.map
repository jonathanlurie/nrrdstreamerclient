{"version":3,"file":"nrrdstreamerclient.js","sources":["../src/constants.js","../src/NrrdStreamer.js"],"sourcesContent":["\nconst NRRD_TYPES_TO_TYPEDARRAY = {\n  \"signed char\": Int8Array,\n  \"int8\": Int8Array,\n  \"int8_t\": Int8Array,\n  \"uchar\": Uint8Array,\n  \"unsigned char\": Uint8Array,\n  \"uint8\": Uint8Array,\n  \"uint8_t\": Uint8Array,\n  \"short\": Int16Array,\n  \"short int\": Int16Array,\n  \"signed short\": Int16Array,\n  \"signed short int\": Int16Array,\n  \"int16\": Int16Array,\n  \"int16_t\": Int16Array,\n  \"ushort\": Uint16Array,\n  \"unsigned short\": Uint16Array,\n  \"unsigned short int\": Uint16Array,\n  \"uint16\": Uint16Array,\n  \"uint16_t\": Uint16Array,\n  \"int\": Int32Array,\n  \"signed int\": Int32Array,\n  \"int32\": Int32Array,\n  \"int32_t\": Int32Array,\n  \"uint\": Uint32Array,\n  \"unsigned int\": Uint32Array,\n  \"uint32\": Uint32Array,\n  \"uint32_t\": Uint32Array,\n  \"longlong\": BigInt64Array,           // OK for Node/V8/Chrome but not Firefox\n  \"long long\": BigInt64Array,\n  \"long long int\": BigInt64Array,\n  \"signed long long\": BigInt64Array,\n  \"signed long long int\": BigInt64Array,\n  \"int64\": BigInt64Array,\n  \"int64_t\": BigInt64Array,\n  \"ulonglong\": BigUint64Array,\n  \"unsigned long long\": BigUint64Array,\n  \"unsigned long long int\": BigUint64Array,\n  \"uint64\": BigUint64Array,\n  \"uint64_t\": BigUint64Array,\n  \"float\": Float32Array,\n  \"double\": Float64Array\n}\n\n\nconst BUFFER_READ_METHODS = {\n  \"signed char\": {\n    \"little\": 'readInt8',\n    \"big\": 'readInt8'\n  },\n  \"int8\": {\n    \"little\": 'readInt8',\n    \"big\": 'readInt8'\n  },\n  \"int8_t\": {\n    \"little\": 'readInt8',\n    \"big\": 'readInt8'\n  },\n  \"uchar\": {\n    \"little\": 'readUInt8',\n    \"big\": 'readUInt8'\n  },\n  \"unsigned char\": {\n    \"little\": 'readUInt8',\n    \"big\": 'readUInt8'\n  },\n  \"uint8\": {\n    \"little\": 'readUInt8',\n    \"big\": 'readUInt8'\n  },\n  \"uint8_t\": {\n    \"little\": 'readUInt8',\n    \"big\": 'readUInt8'\n  },\n  \"short\": {\n    \"little\": 'readInt16LE',\n    \"big\": 'readInt16BE'\n  },\n  \"short int\": {\n    \"little\": 'readInt16LE',\n    \"big\": 'readInt16BE'\n  },\n  \"signed short\": {\n    \"little\": 'readInt16LE',\n    \"big\": 'readInt16BE'\n  },\n  \"signed short int\": {\n    \"little\": 'readInt16LE',\n    \"big\": 'readInt16BE'\n  },\n  \"int16\": {\n    \"little\": 'readInt16LE',\n    \"big\": 'readInt16BE'\n  },\n  \"int16_t\": {\n    \"little\": 'readInt16LE',\n    \"big\": 'readInt16BE'\n  },\n  \"ushort\": {\n    \"little\": 'readUInt16LE',\n    \"big\": 'readUInt16BE'\n  },\n  \"unsigned short\": {\n    \"little\": 'readUInt16LE',\n    \"big\": 'readUInt16BE'\n  },\n  \"unsigned short int\": {\n    \"little\": 'readUInt16LE',\n    \"big\": 'readUInt16BE'\n  },\n  \"uint16\": {\n    \"little\": 'readUInt16LE',\n    \"big\": 'readUInt16BE'\n  },\n  \"uint16_t\": {\n    \"little\": 'readUInt16LE',\n    \"big\": 'readUInt16BE'\n  },\n  \"int\": {\n    \"little\": 'readInt32LE',\n    \"big\": 'readInt32BE'\n  },\n  \"signed int\": {\n    \"little\": 'readInt32LE',\n    \"big\": 'readInt32BE'\n  },\n  \"int32\": {\n    \"little\": 'readInt32LE',\n    \"big\": 'readInt32BE'\n  },\n  \"int32_t\": {\n    \"little\": 'readInt32LE',\n    \"big\": 'readInt32BE'\n  },\n  \"uint\": {\n    \"little\": 'readUInt32LE',\n    \"big\": 'readUInt32BE'\n  },\n  \"unsigned int\": {\n    \"little\": 'readUInt32LE',\n    \"big\": 'readUInt32BE'\n  },\n  \"uint32\": {\n    \"little\": 'readUInt32LE',\n    \"big\": 'readUInt32BE'\n  },\n  \"uint32_t\": {\n    \"little\": 'readUInt32LE',\n    \"big\": 'readUInt32BE'\n  },\n  \"longlong\": {\n    \"little\": 'readBigInt64LE',\n    \"big\": 'readBigInt64BE'\n  },           // OK for Node/V8/Chrome but not Firefox\n  \"long long\": {\n    \"little\": 'readBigInt64LE',\n    \"big\": 'readBigInt64BE'\n  },\n  \"long long int\": {\n    \"little\": 'readBigInt64LE',\n    \"big\": 'readBigInt64BE'\n  },\n  \"signed long long\": {\n    \"little\": 'readBigInt64LE',\n    \"big\": 'readBigInt64BE'\n  },\n  \"signed long long int\": {\n    \"little\": 'readBigInt64LE',\n    \"big\": 'readBigInt64BE'\n  },\n  \"int64\": {\n    \"little\": 'readBigInt64LE',\n    \"big\": 'readBigInt64BE'\n  },\n  \"int64_t\": {\n    \"little\": 'readBigInt64LE',\n    \"big\": 'readBigInt64BE'\n  },\n  \"ulonglong\": {\n    \"little\": 'readBigUInt64LE',\n    \"big\": 'readBigUInt64BE'\n  },\n  \"unsigned long long\": {\n    \"little\": 'readBigUInt64LE',\n    \"big\": 'readBigUInt64BE'\n  },\n  \"unsigned long long int\": {\n    \"little\": 'readBigUInt64LE',\n    \"big\": 'readBigUInt64BE'\n  },\n  \"uint64\": {\n    \"little\": 'readBigUInt64LE',\n    \"big\": 'readBigUInt64BE'\n  },\n  \"uint64_t\": {\n    \"little\": 'readBigUInt64LE',\n    \"big\": 'readBigUInt64BE'\n  },\n  \"float\": {\n    \"little\": 'readFloatLE',\n    \"big\": 'readFloatBE'\n  },\n  \"double\": {\n    \"little\": 'readDoubleLE',\n    \"big\": 'readDoubleBE'\n  }\n}\n\n\nexport {\n  NRRD_TYPES_TO_TYPEDARRAY,\n  BUFFER_READ_METHODS\n}\n","import * as glMatrix from 'gl-matrix'\nimport { NRRD_TYPES_TO_TYPEDARRAY, BUFFER_READ_METHODS } from './constants'\n\nconst NRRD_HEADER_BYTE_SIZE_MAX = 600\nconst NEW_LINE_CHAR = '\\n'\n\n/**\n * This is to stream **NRRD** files from client side in Javascript, aka. picking\n * a values given some [x, y, z] coordinates without having to fetch/download the\n * entire file.\n * Note that the [x, y, z] coordinates are natively in world space coordinates.\n *\n *  example:\n * ```javascript\n *  let filepath = 'http://127.0.0.1:8080/annotation_25_uncomp.nrrd'\n *  let ns = new nrrdstreamerclient(filepath)\n *\n *  ns.getNrrdHeader(function(nrrdHeader){\n *     ns.streamNrrdValue([2000, 4000, 4000],\n *     function(payload){\n *       console.log(payload)\n *       // The payload object is of form:\n *       // {\n *       //    error: null,\n *       //    position: [2000, 4000, 4000],\n *       //    value: 400\n *       // }\n *     })\n *  })\n * ```\n *\n * As the header of the NRRD file must be fetched before streaming any actual value,\n * the method is automatically called if necessary, so that the previous block of code\n * could be:\n * ```javascript\n *  let filepath = 'http://127.0.0.1:8080/annotation_25_uncomp.nrrd'\n *  let ns = new nrrdstreamerclient(filepath)\n *\n *  ns.streamNrrdValue([2000, 4000, 4000],\n *  function(payload){\n *    console.log(payload)\n *    // The payload object is of form:\n *    // {\n *    //    error: null,\n *    //    position: [2000, 4000, 4000],\n *    //    value: 400\n *    // }\n *  })\n * ```\n *\n * **IMPORTANT**: The NRRD file to be streamed must be uncompressed (`encoding: raw`)\n *\n * **TODO**\n * - Add convenience method to bet volume boundaries in world space and voxel space\n * - make it compatible with multiband volume (ie. quaternion or vector NRRD) or time series (ie. fMRI)\n *\n *\n */\nclass NrrdStreamer {\n\n  /**\n   * @constructor\n   */\n  constructor(url, httpHeaders = {}){\n    this._url = url\n    this._httpHeaders = httpHeaders\n    this._nrrdHeader = null\n    this._dataByteOffset = null\n    this._nrrdVersion = null\n  }\n\n\n  /**\n   * Set the HTTP header for future GET requests\n   * @param {Object} httpHeaders - OPTIONAL the entries for HTTP headers\n   */\n  setHttpHeader(httpHeaders){\n    this._httpHeaders = httpHeaders\n  }\n\n\n  /**\n   * Fetch the header of the NRRD file and parses it. As this methods is asynchronous,\n   * The NRRD header object is not returned but passed as the argument of the callback function\n   * @param {Function} cb - callback function called when the header is parsed\n   */\n  getNrrdHeader(cb){\n    let that = this\n    // make a copy of the header\n    let getHeaders = JSON.parse(JSON.stringify(this._httpHeaders))\n    getHeaders['range'] = `bytes=0-${NRRD_HEADER_BYTE_SIZE_MAX}`\n\n    fetch(this._url,{\n      headers: getHeaders\n    })\n    .then(function(response) {\n      return response.text()\n    })\n    .then(function(headerText) {\n      that._findDataOffset(headerText)\n      that._parseNrrdHeader(headerText, cb)\n    });\n  }\n\n\n  /**\n   * @private\n   * Look at the raw text buffer from the NRRD header and verify at what byte\n   * offset the actual data starts.\n   * @param {string} nrrdTextHeader - the text buffer that contains the header but that is most likely a bit larger\n   */\n  _findDataOffset(nrrdTextHeader){\n    for(let i=1; i<nrrdTextHeader.length; i++){\n      if(nrrdTextHeader[i] === NEW_LINE_CHAR && nrrdTextHeader[i-1] === NEW_LINE_CHAR){\n        this._dataByteOffset = i + 1\n        break\n      }\n    }\n  }\n\n\n  /**\n   * @private\n   * @param {string} nrrdTextHeader - the text buffer that contains the header but that is most likely a bit larger\n   * @param {Function} cb - callback function called to be called when the header is parsed\n   */\n  _parseNrrdHeader(nrrdTextHeader, cb){\n    let trimmedHeader = nrrdTextHeader.slice(0, this._dataByteOffset).trim()\n\n    let lines = trimmedHeader.split(NEW_LINE_CHAR)\n    let magicNumber = lines[0].trim()\n\n    let preMap = lines.slice(1)\n    .filter( s => { // removing empty lines\n      return s.length > 0\n    })\n    .filter( s => { // removing comments\n      return (s[0] !== '#')\n    })\n    .map( s => {\n      let keyVal = s.split(':')\n      return {\n        key: keyVal[0].trim(),\n        val: keyVal[1].trim()\n      }\n    })\n\n    let nrrdHeader = {}\n    preMap.forEach( field => {\n      nrrdHeader[field.key] = field.val\n    })\n\n\n    // parsing each fields of the header\n    if(nrrdHeader['sizes']){\n      nrrdHeader['sizes'] = nrrdHeader.sizes.split(' ').map( n => parseInt(n))\n    }\n\n    if(nrrdHeader['space directions']){\n      nrrdHeader['space directions'] = nrrdHeader['space directions'].split(' ')\n          .map(triple => {\n            return triple.slice(1, triple.length-1).split(',').map(n => parseFloat(n))\n          })\n    }\n\n    if(nrrdHeader['dimension']){\n      nrrdHeader['dimension'] = parseInt(nrrdHeader['dimension'])\n    }\n\n    if(nrrdHeader['space origin']){\n      nrrdHeader['space origin'] = nrrdHeader['space origin']\n          .slice(1, nrrdHeader['space origin'].length-1)\n          .split(',')\n          .map(n => parseFloat(n))\n    }\n\n    if(nrrdHeader['kinds']){\n      nrrdHeader['kinds'] = nrrdHeader['kinds'].split(' ')\n    }\n\n    if(nrrdHeader['space dimension']){\n      nrrdHeader['space dimension'] = parseInt(nrrdHeader['space dimension'])\n    }\n\n    this._nrrdHeader = nrrdHeader\n    cb(nrrdHeader)\n  }\n\n\n  /**\n   * Get the value from the volume at a specific position\n   * @param {Array} position - array as [x, y, z] in worls space coordinates\n   * @param {Function} cb - callback function called when the streaming is done\n   */\n  streamNrrdValue(position, cb){\n    let that = this\n    if(this._nrrdHeader){\n      this._streamValue(position, cb)\n    } else {\n      this.getNrrdHeader(function(nrrdHeader){\n        that._streamValue(position, cb)\n      })\n    }\n  }\n\n\n  /**\n   * @private\n   * Private equivalent of streamNrrdValue, but assumes the NRRD header is already parsed.\n   * @param {Array} position - array as [x, y, z] in worls space coordinates\n   * @param {Function} cb - callback function called when the streaming is done\n   */\n  _streamValue(position, cb){\n    let resultPayload = {\n      error: null,\n      position: position,\n      value: null\n    }\n\n    if(this._nrrdHeader.encoding !== 'raw'){\n      resultPayload.error = new Error(`To stream content, the encoding of the NRRD file must be 'raw' (aka. uncompressed). Found: '${this._nrrdHeader.encoding}'`)\n      return cb(resultPayload)\n    }\n\n    let xsize = this._nrrdHeader['sizes'][0]\n    let ysize = this._nrrdHeader['sizes'][1]\n    let zsize = this._nrrdHeader['sizes'][2]\n\n    let dataType = NRRD_TYPES_TO_TYPEDARRAY[this._nrrdHeader.type]\n    let byteSizePerVoxel = dataType.BYTES_PER_ELEMENT\n\n    let voxPos = this._getPositionWorldToVoxel(position)\n    let voxelIndexFlat = xsize * ysize * voxPos[2] + xsize * voxPos[1] + voxPos[0]\n    let byteIndexFlat = voxelIndexFlat * byteSizePerVoxel + this._dataByteOffset\n\n\n\n    if(voxPos[0]<0 || voxPos[0]>this._nrrdHeader.sizes[0] ||\n       voxPos[1]<0 || voxPos[1]>this._nrrdHeader.sizes[1] ||\n       voxPos[2]<0 || voxPos[2]>this._nrrdHeader.sizes[2])\n    {\n      resultPayload.error = new Error(`The position is outside the volume.`)\n      return cb(resultPayload)\n    }\n\n    let getHeaders = JSON.parse(JSON.stringify(this._httpHeaders))\n    getHeaders['range'] = `bytes=${byteIndexFlat}-${byteIndexFlat + byteSizePerVoxel - 1}`\n\n    fetch(this._url,{\n      headers: getHeaders\n    })\n    .then(function(response) {\n      return response.blob()\n    })\n    .then(function(responseBlob) {\n      let fileReader = new FileReader()\n      fileReader.onload  = function(event) {\n        let arrayBuffer = event.target.result\n        resultPayload.value = new dataType(arrayBuffer)[0]\n        cb(resultPayload)\n      }\n      fileReader.readAsArrayBuffer(responseBlob)\n    })\n  }\n\n\n  /**\n   * @private\n   * Converts world space coordinates to voxel space so that we can query the volume\n   * using its buffer representation.\n   * @param {Array} worldCoordinates - position as [x, y, z]\n   * @reuturn {Array} as [x, y, z] in voxel space. Those are rounded.\n   */\n  _getPositionWorldToVoxel(worldCoordinates){\n    let of = this._nrrdHeader['space origin'] // offset\n    let sc = this._nrrdHeader['space directions'] // scale\n    let v2w = glMatrix.mat4.fromValues(sc[0][0], sc[0][1], sc[0][2], 0,\n                                       sc[1][0], sc[1][1], sc[1][2], 0,\n                                       sc[2][0], sc[2][1], sc[2][2], 0,\n                                       of[0], of[1], of[2], 1)\n    let w2v = glMatrix.mat4.create()\n    glMatrix.mat4.invert(w2v, v2w)\n    let worldPos = glMatrix.vec3.fromValues(worldCoordinates[0], worldCoordinates[1], worldCoordinates[2])\n    let voxelPos = glMatrix.vec3.create()\n    glMatrix.vec3.transformMat4(voxelPos, worldPos, w2v)\n    return voxelPos.map(n => Math.round(n))\n  }\n\n}\n\nexport default NrrdStreamer\n"],"names":["glMatrix.mat4","glMatrix.vec3"],"mappings":"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"}